// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
option java_package = "org.apache.celeborn.common.protocol";
option java_multiple_files = true;

enum MessageType {
  UNKNOWN_MESSAGE = 0;
  REGISTER_WORKER = 1;
  HEARTBEAT_FROM_WORKER = 2;
  HEARTBEAT_RESPONSE = 3;
  REGISTER_SHUFFLE = 4;
  REGISTER_SHUFFLE_RESPONSE = 5;
  REQUEST_SLOTS = 6;
  RELEASE_SLOTS = 7;
  RELEASE_SLOTS_RESPONSE = 8;
  REQUEST_SLOTS_RESPONSE = 9;
  REVIVE = 10;
  CHANGE_LOCATION_RESPONSE = 11;
  MAPPER_END = 12;
  MAPPER_END_RESPONSE = 13;
  GET_REDUCER_FILE_GROUP = 14;
  GET_REDUCER_FILE_GROUP_RESPONSE = 15;
  UNREGISTER_SHUFFLE = 16;
  UNREGISTER_SHUFFLE_RESPONSE = 17;
  APPLICATION_LOST = 18;
  APPLICATION_LOST_RESPONSE = 19;
  HEARTBEAT_FROM_APPLICATION = 20;
  GET_BLACKLIST = 21;
  GET_BLACKLIST_RESPONSE = 22;
  CHECK_QUOTA = 23;
  CHECK_QUOTA_RESPONSE = 24;
  REPORT_WORKER_FAILURE = 25;
  REGISTER_WORKER_RESPONSE = 26;
  REREGISTER_WORKER_RESPONSE = 27;
  RESERVE_SLOTS = 28;
  RESERVE_SLOTS_RESPONSE = 29;
  COMMIT_FILES = 30;
  COMMIT_FILES_RESPONSE = 31;
  DESTROY = 32;
  DESTROY_RESPONSE = 33;
  SLAVE_LOST_RESPONSE = 34;
  GET_WORKER_INFO = 35;
  GET_WORKER_INFO_RESPONSE = 36;
  THREAD_DUMP = 37;
  THREAD_DUMP_RESPONSE = 38;
  REMOVE_EXPIRED_SHUFFLE = 39;
  ONE_WAY_MESSAGE_RESPONSE = 40;
  CHECK_FOR_WORKER_TIMEOUT = 41;
  CHECK_FOR_APPLICATION_TIMEOUT = 42;
  WORKER_LOST = 43;
  WORKER_LOST_RESPONSE = 44;
  STAGE_END = 45;
  STAGE_END_RESPONSE = 46;
  PARTITION_SPLIT = 47;
}

message PbStorageInfo {
  int32 type = 1;
  string mountPoint = 2;
  bool finalResult = 3;
  string filePath = 4;
}

message PbPartitionLocation {
  enum Mode {
    Master = 0;
    Slave = 1;
  }
  Mode mode = 1;
  int32 id = 2;
  int32 epoch = 3;
  string host = 4;
  int32 rpcPort = 5;
  int32 pushPort = 6;
  int32 fetchPort = 7;
  int32 replicatePort = 8;
  PbPartitionLocation peer = 9;
  PbStorageInfo storageInfo = 10;
  bytes mapIdBitmap = 11;
}

message PbWorkerResource {
  repeated PbPartitionLocation masterPartitions = 1;
  repeated PbPartitionLocation slavePartitions = 2;
}

message PbDiskInfo {
  string mountPoint = 1;
  int64 usableSpace = 2;
  int64 avgFlushTime = 3;
  int64 usedSlots = 4;
  int32 status = 5;
  int64 avgFetchTime = 6;
}

message PbWorkerInfo {
  string host = 1;
  int32 rpcPort = 2;
  int32 pushPort = 3;
  int32 fetchPort = 4;
  int32 replicatePort = 5;
  repeated PbDiskInfo disks = 6;
  map<string, PbResourceConsumption> userResourceConsumption = 7;
}

message PbFileGroup {
  repeated PbPartitionLocation locations = 1;
}

message PbRegisterWorker {
  string host = 1;
  int32 rpcPort = 2;
  int32 pushPort = 3;
  int32 fetchPort = 4;
  int32 replicatePort = 5;
  repeated PbDiskInfo disks = 6;
  string requestId = 9;
  map<string, PbResourceConsumption> userResourceConsumption = 8;
}

message PbHeartbeatFromWorker {
  string host = 1;
  int32 rpcPort = 2;
  int32 pushPort = 3;
  int32 fetchPort = 4;
  int32 replicatePort = 5;
  repeated PbDiskInfo disks = 6;
  repeated string activeShuffleKeys = 7;
  string requestId = 8;
  map<string, PbResourceConsumption> userResourceConsumption = 9;
  map<string, int64> estimatedAppDiskUsage = 10;
}

message PbHeartbeatResponse {
  repeated string expiredShuffleKeys = 1;
  bool registered = 2;
}

message PbRegisterShuffle {
  string applicationId = 1;
  int32 shuffleId = 2;
  int32 numMapppers = 3;
  int32 numPartitions = 4;
}

message PbRegisterMapPartitionTask {
  string applicationId = 1;
  int32 shuffleId = 2;
  int32 numMappers = 3;
  int32 mapId = 4;
  int32 attemptId = 5;
  int32 partitionId = 6;
}

message PbRegisterShuffleResponse {
  int32 status = 1;
  repeated PbPartitionLocation partitionLocations = 2;
}

message PbRequestSlots {
  string applicationId = 1;
  int32 shuffleId = 2;
  repeated int32 partitionIdList = 3;
  string hostname = 4;
  bool shouldReplicate = 5;
  string requestId = 6;
  int32 storageType = 7;
  PbUserIdentifier userIdentifier = 8;
}

message PbSlotInfo {
  map<string, int32> slot = 1;
}

message PbReleaseSlots {
  string applicationId = 1;
  int32 shuffleId = 2;
  repeated string workerIds = 3;
  repeated PbSlotInfo slots = 4;
  string requestId = 6;
}

message PbReleaseSlotsResponse {
  int32 status = 1;
}

message PbRequestSlotsResponse {
  int32 status = 1;
  map<string, PbWorkerResource> workerResource = 2;
}

message PbRevive {
  string applicationId = 1;
  int32 shuffleId = 2;
  int32 mapId = 3;
  int32 attemptId = 4;
  int32 partitionId = 5;
  int32 epoch = 6;
  PbPartitionLocation oldPartition = 7;
  int32 status = 8;
}

message PbChangeLocationResponse {
  int32 status = 1;
  PbPartitionLocation location = 2;
}

message PbPartitionSplit {
  string applicationId = 1;
  int32 shuffleId = 2;
  int32 partitionId = 3;
  int32 epoch = 4;
  PbPartitionLocation oldPartition = 5;
}

message PbMapperEnd {
  string applicationId = 1;
  int32 shuffleId = 2;
  int32 mapId = 3;
  int32 attemptId = 4;
  int32 numMappers = 5;
}

message PbMapperEndResponse {
  int32 status = 1;
}

message PbGetReducerFileGroup {
  string applicationId = 1;
  int32 shuffleId = 2;
}

message PbGetReducerFileGroupResponse {
  int32 status = 1;
  repeated PbFileGroup fileGroup = 2;
  repeated int32 attempts = 3;
}

message PbUnregisterShuffle {
  string appId = 1;
  int32 shuffleId = 2;
  string requestId = 3;
}

message PbUnregisterShuffleResponse {
  int32 status = 1;
}

message PbApplicationLost {
  string appId = 1;
  string requestId = 2;
}

message PbApplicationLostResponse {
  int32 status = 1;
}

message PbHeartbeatFromApplication {
  string appId = 1;
  int64 totalWritten = 2;
  int64 fileCount = 3 ;
  string requestId = 4;
}

message PbGetBlacklist {
  repeated PbWorkerInfo localBlackList = 1;
}

message PbGetBlacklistResponse {
  int32 status = 1;
  repeated PbWorkerInfo blacklist = 2;
  repeated PbWorkerInfo unknownWorkers = 3;
}

message PbCheckQuota {
  PbUserIdentifier userIdentifier = 1;
}

message PbCheckQuotaResponse {
  bool available = 1;
}

message PbReportWorkerUnavailable {
  repeated PbWorkerInfo unavailable = 1;
  string requestId = 2;
}

message PbRegisterWorkerResponse {
  bool success = 1;
  string message = 2;
}

message PbReregisterWorkerResponse {
  bool success = 1;
}

message PbReserveSlots {
  string applicationId = 1;
  int32 shuffleId = 2;
  repeated PbPartitionLocation masterLocations = 3;
  repeated PbPartitionLocation slaveLocations = 4;
  int64 splitThreshold = 5;
  int32 splitMode = 6;
  int32 partitionType = 7;
  bool rangeReadFilter = 8;
  PbUserIdentifier userIdentifier = 9;
}

message PbReserveSlotsResponse {
  int32 status = 1;
  string reason = 2;
}

message PbCommitFiles {
  string applicationId = 1;
  int32 shuffleId = 2;
  repeated string masterIds = 3;
  repeated string slaveIds = 4;
  repeated int32 mapAttempts = 5;
  int64 epoch = 6;
}

message PbCommitFilesResponse {
  int32 status = 1;
  repeated string committedMasterIds = 2;
  repeated string committedSlaveIds = 3;
  repeated string failedMasterIds = 4;
  repeated string failedSlaveIds = 5;
  map<string, PbStorageInfo> committedMasterStorageInfos = 6;
  map<string, PbStorageInfo> committedSlaveStorageInfos = 7;
  map<string, bytes> mapIdBitmap = 10;
  int64 totalWritten = 8;
  int32 fileCount = 9;
}

message PbDestroy {
  string shuffleKey = 1;
  repeated string masterLocations = 2;
  repeated string slaveLocation = 3;
}

message PbDestroyResponse {
  int32 status = 1;
  repeated string failedMasters = 2;
  repeated string failedSlaves = 3;
}

message PbSlaveLostResponse {
  int32 status = 1;
  PbPartitionLocation slaveLocation = 2;
}

message PbGetWorkerInfosResponse {
  int32 status = 1;
  repeated PbWorkerInfo workerInfos = 2;
}

message PbThreadDumpResponse {
  string threadDump = 1;
}

message PbCheckForWorkerTimeout {
}

message PbWorkerLost {
  string host = 1;
  int32 rpcPort = 2;
  int32 pushPort = 3;
  int32 fetchPort = 4;
  int32 replicatePort = 5;
  string requestId = 6;
}

message PbWorkerLostResponse {
  bool success = 1;
}

message PbStageEnd {
  string applicationId = 1;
  int32 shuffleId = 2;
}

message PbStageEndResponse {
  int32 status = 1;
}

message PbSortedShuffleFileSet {
  repeated string files = 1;
}

message PbStoreVersion {
  int32 major = 1;
  int32 minor = 2;
}

message PbFileInfo {
  string filePath = 1;
  repeated int64 chunkOffsets = 2;
  PbUserIdentifier userIdentifier = 3;
  int32 partitionType = 4;
}

message PbFileInfoMap {
  map<string, PbFileInfo> values = 1;
}

message PbUserIdentifier {
  string tenantId = 1;
  string name = 2;
}

message PbResourceConsumption {
  int64 diskBytesWritten = 1;
  int64 diskFileCount = 2;
  int64 hdfsBytesWritten = 3;
  int64 hdfsFileCount = 4;
}

message PbAppDiskUsage {
  string appId = 1;
  int64 estimatedUsage = 2;
}

message PbAppDiskUsageSnapshot {
  int32 topItemCount = 1;
  repeated PbAppDiskUsage topNItems = 2;
  int64 startSnapShotTime = 3;
  int64 endSnapshotTime = 4;
}

message PbSnapshotMetaInfo {
  int64 estimatedPartitionSize = 1;
  repeated string registeredShuffle = 2;
  repeated string hostnameSet = 3;
  repeated PbWorkerInfo blacklist = 4;
  repeated PbWorkerInfo workerLostEvents = 5;
  map<string, int64> appHeartbeatTime = 6;
  repeated PbWorkerInfo workers = 7;
  int64 partitionTotalWritten = 8;
  int64 partitionTotalFileCount = 9;
  repeated PbAppDiskUsageSnapshot appDiskUsageMetricSnapshots = 10;
  optional PbAppDiskUsageSnapshot currentAppDiskUsageMetricsSnapshot = 11;
}
