// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
option java_package = "org.apache.celeborn.common.protocol";
option java_multiple_files = true;

enum MessageType {
  UNKNOWN_MESSAGE = 0;
  REGISTER_WORKER = 1;
  HEARTBEAT_FROM_WORKER = 2;
  HEARTBEAT_FROM_WORKER_RESPONSE = 3;
  REGISTER_SHUFFLE = 4;
  REGISTER_SHUFFLE_RESPONSE = 5;
  REQUEST_SLOTS = 6;
  // keep it for compatible with 0.3 client, will remove in 0.5
  RELEASE_SLOTS = 7;
  RELEASE_SLOTS_RESPONSE = 8;

  REQUEST_SLOTS_RESPONSE = 9;
  CHANGE_LOCATION = 10;
  CHANGE_LOCATION_RESPONSE = 11;
  MAPPER_END = 12;
  MAPPER_END_RESPONSE = 13;
  GET_REDUCER_FILE_GROUP = 14;
  GET_REDUCER_FILE_GROUP_RESPONSE = 15;
  UNREGISTER_SHUFFLE = 16;
  UNREGISTER_SHUFFLE_RESPONSE = 17;
  APPLICATION_LOST = 18;
  APPLICATION_LOST_RESPONSE = 19;
  HEARTBEAT_FROM_APPLICATION = 20;
  // GET_BLACKLIST = 21;
  // GET_BLACKLIST_RESPONSE = 22;
  CHECK_QUOTA = 23;
  CHECK_QUOTA_RESPONSE = 24;
  REPORT_WORKER_FAILURE = 25;
  REGISTER_WORKER_RESPONSE = 26;
  // REREGISTER_WORKER_RESPONSE = 27;
  RESERVE_SLOTS = 28;
  RESERVE_SLOTS_RESPONSE = 29;
  COMMIT_FILES = 30;
  COMMIT_FILES_RESPONSE = 31;
  DESTROY = 32;
  DESTROY_RESPONSE = 33;
  // SLAVE_LOST_RESPONSE = 34;
  // GET_WORKER_INFO = 35;
  // GET_WORKER_INFO_RESPONSE = 36;
  // THREAD_DUMP = 37;
  // THREAD_DUMP_RESPONSE = 38;
  REMOVE_EXPIRED_SHUFFLE = 39;
  ONE_WAY_MESSAGE_RESPONSE = 40;
  CHECK_WORKER_TIMEOUT = 41;
  CHECK_APPLICATION_TIMEOUT = 42;
  WORKER_LOST = 43;
  WORKER_LOST_RESPONSE = 44;
  STAGE_END = 45;
  STAGE_END_RESPONSE = 46;
  PARTITION_SPLIT = 47;
  REGISTER_MAP_PARTITION_TASK = 48;
  HEARTBEAT_FROM_APPLICATION_RESPONSE = 49;
  CHECK_FOR_HDFS_EXPIRED_DIRS_TIMEOUT = 50;
  OPEN_STREAM = 51;
  STREAM_HANDLER = 52;
  CHECK_WORKERS_AVAILABLE = 53;
  CHECK_WORKERS_AVAILABLE_RESPONSE = 54;
  REMOVE_WORKERS_UNAVAILABLE_INFO = 55;
  PUSH_DATA_HAND_SHAKE = 56;
  REGION_START = 57;
  REGION_FINISH = 58;
  BACKLOG_ANNOUNCEMENT = 59;
  BUFFER_STREAM_END = 60;
  READ_ADD_CREDIT = 61;
  STREAM_CHUNK_SLICE = 62;
  CHUNK_FETCH_REQUEST = 63;
  TRANSPORTABLE_ERROR = 64;
  WORKER_EXCLUDE = 65;
  WORKER_EXCLUDE_RESPONSE = 66;
  REPORT_SHUFFLE_FETCH_FAILURE = 67;
  REPORT_SHUFFLE_FETCH_FAILURE_RESPONSE = 68;
  GET_SHUFFLE_ID = 69;
  GET_SHUFFLE_ID_RESPONSE = 70;
  SASL_REQUEST = 71;
}

enum StreamType {
  ChunkStream = 0;
  CreditStream = 1;
}

message PbStorageInfo {
  int32 type = 1;
  string mountPoint = 2;
  bool finalResult = 3;
  string filePath = 4;
  int32 availableStorageTypes = 5;
}

message PbPartitionLocation {
  enum Mode {
    Primary = 0;
    Replica = 1;
  }
  Mode mode = 1;
  int32 id = 2;
  int32 epoch = 3;
  string host = 4;
  int32 rpcPort = 5;
  int32 pushPort = 6;
  int32 fetchPort = 7;
  int32 replicatePort = 8;
  PbPartitionLocation peer = 9;
  PbStorageInfo storageInfo = 10;
  bytes mapIdBitmap = 11;
}

message PbWorkerResource {
  repeated PbPartitionLocation primaryPartitions = 1;
  repeated PbPartitionLocation replicaPartitions = 2;
  string networkLocation = 3;
}

message PbDiskInfo {
  string mountPoint = 1;
  int64 usableSpace = 2;
  int64 avgFlushTime = 3;
  int64 usedSlots = 4;
  int32 status = 5;
  int64 avgFetchTime = 6;
  int32 storageType = 7;
}

message PbWorkerInfo {
  string host = 1;
  int32 rpcPort = 2;
  int32 pushPort = 3;
  int32 fetchPort = 4;
  int32 replicatePort = 5;
  repeated PbDiskInfo disks = 6;
  map<string, PbResourceConsumption> userResourceConsumption = 7;
}

message PbFileGroup {
  repeated PbPartitionLocation locations = 1;
}

message PbRegisterWorker {
  string host = 1;
  int32 rpcPort = 2;
  int32 pushPort = 3;
  int32 fetchPort = 4;
  int32 replicatePort = 5;
  repeated PbDiskInfo disks = 6;
  string requestId = 9;
  map<string, PbResourceConsumption> userResourceConsumption = 8;
}

message PbHeartbeatFromWorker {
  string host = 1;
  int32 rpcPort = 2;
  int32 pushPort = 3;
  int32 fetchPort = 4;
  int32 replicatePort = 5;
  repeated PbDiskInfo disks = 6;
  repeated string activeShuffleKeys = 7;
  string requestId = 8;
  map<string, PbResourceConsumption> userResourceConsumption = 9;
  map<string, int64> estimatedAppDiskUsage = 10;
  bool highWorkload = 11;
}

message PbHeartbeatFromWorkerResponse {
  repeated string expiredShuffleKeys = 1;
  bool registered = 2;
}

message PbRegisterShuffle {
  int32 shuffleId = 1;
  int32 numMappers = 2;
  int32 numPartitions = 3;
}

message PbRegisterMapPartitionTask {
  int32 shuffleId = 1;
  int32 numMappers = 2;
  int32 mapId = 3;
  int32 attemptId = 4;
  int32 partitionId = 5;
}

message PbRegisterShuffleResponse {
  int32 status = 1;
  repeated PbPartitionLocation partitionLocations = 2;
}

message PbRequestSlots {
  string applicationId = 1;
  int32 shuffleId = 2;
  repeated int32 partitionIdList = 3;
  string hostname = 4;
  bool shouldReplicate = 5;
  string requestId = 6;
  int32 storageType = 7;
  PbUserIdentifier userIdentifier = 8;
  bool shouldRackAware = 9;
  int32 maxWorkers = 10;
  int32 availableStorageTypes = 11;
  repeated PbWorkerInfo excludedWorkerSet = 12;
}

message PbSlotInfo {
  map<string, int32> slot = 1;
}

// keep it for compatible reason
message PbReleaseSlots {
  string applicationId = 1;
  int32 shuffleId = 2;
  repeated string workerIds = 3;
  repeated PbSlotInfo slots = 4;
  string requestId = 6;
}

// keep it for compatible reason
message PbReleaseSlotsResponse {
  int32 status = 1;
}


message PbRequestSlotsResponse {
  int32 status = 1;
  map<string, PbWorkerResource> workerResource = 2;
}

message PbRevivePartitionInfo {
  int32 partitionId = 1;
  int32 epoch = 2;
  PbPartitionLocation partition = 3;
  int32 status = 4;
}

message PbRevive {
  int32 shuffleId = 1;
  repeated int32 mapId = 2;
  repeated PbRevivePartitionInfo partitionInfo = 3;
}

message PbChangeLocationPartitionInfo {
  int32 partitionId = 1;
  int32 status = 2;
  PbPartitionLocation partition = 3;
  bool oldAvailable = 4;
}

message PbChangeLocationResponse {
  repeated int32 endedMapId = 1;
  repeated PbChangeLocationPartitionInfo partitionInfo = 2;
}

message PbPartitionSplit {
  int32 shuffleId = 1;
  int32 partitionId = 2;
  int32 epoch = 3;
  PbPartitionLocation oldPartition = 4;
}

message PbMapperEnd {
  int32 shuffleId = 1;
  int32 mapId = 2;
  int32 attemptId = 3;
  int32 numMappers = 4;
  int32 partitionId = 5;
}

message PbMapperEndResponse {
  int32 status = 1;
}

message PbGetReducerFileGroup {
  int32 shuffleId = 1;
}

message PbGetReducerFileGroupResponse {
  int32 status = 1;
  // PartitionId -> Partition FileGroup
  map<int32, PbFileGroup> fileGroups = 2;

  // only reduce partition mode need know valid attempts
  repeated int32 attempts = 3;

  // only map partition mode has succeed partitionIds
  repeated int32 partitionIds = 4;
}

message PbGetShuffleId {
  int32 appShuffleId = 1;
  string appShuffleIdentifier = 2;
  bool isShuffleWriter = 3;
}

message PbGetShuffleIdResponse {
  int32 shuffleId = 1;
}

message PbReportShuffleFetchFailure {
  int32 appShuffleId = 1;
  int32 shuffleId = 2;
}

message PbReportShuffleFetchFailureResponse {
  bool success = 1;
}

message PbUnregisterShuffle {
  string appId = 1;
  int32 shuffleId = 2;
  string requestId = 3;
}

message PbUnregisterShuffleResponse {
  int32 status = 1;
}

message PbApplicationLost {
  string appId = 1;
  string requestId = 2;
}

message PbApplicationLostResponse {
  int32 status = 1;
}

message PbHeartbeatFromApplication {
  string appId = 1;
  int64 totalWritten = 2;
  int64 fileCount = 3 ;
  string requestId = 4;
  repeated PbWorkerInfo needCheckedWorkerList = 5;
  bool shouldResponse = 6;
}

message PbHeartbeatFromApplicationResponse {
  int32 status = 1;
  repeated PbWorkerInfo excludedWorkers = 2;
  repeated PbWorkerInfo unknownWorkers = 3;
  repeated PbWorkerInfo shuttingWorkers = 4;
}

message PbCheckQuota {
  PbUserIdentifier userIdentifier = 1;
}

message PbCheckQuotaResponse {
  bool available = 1;
  string reason = 2;
}

message PbCheckWorkersAvailable {
}

message PbCheckWorkersAvailableResponse {
  bool available = 1;
}

message PbReportWorkerUnavailable {
  repeated PbWorkerInfo unavailable = 1;
  string requestId = 2;
}

message PbRegisterWorkerResponse {
  bool success = 1;
  string message = 2;
}

message PbReserveSlots {
  string applicationId = 1;
  int32 shuffleId = 2;
  repeated PbPartitionLocation primaryLocations = 3;
  repeated PbPartitionLocation replicaLocations = 4;
  int64 splitThreshold = 5;
  int32 splitMode = 6;
  int32 partitionType = 7;
  bool rangeReadFilter = 8;
  PbUserIdentifier userIdentifier = 9;
  int64 pushDataTimeout = 10;
  bool partitionSplitEnabled = 11;
  int32 availableStorageTypes = 12;
}

message PbReserveSlotsResponse {
  int32 status = 1;
  string reason = 2;
}

message PbCommitFiles {
  string applicationId = 1;
  int32 shuffleId = 2;
  repeated string primaryIds = 3;
  repeated string replicaIds = 4;
  repeated int32 mapAttempts = 5;
  int64 epoch = 6;
  bool mockFailure = 7;
}

message PbCommitFilesResponse {
  int32 status = 1;
  repeated string committedPrimaryIds = 2;
  repeated string committedReplicaIds = 3;
  repeated string failedPrimaryIds = 4;
  repeated string failedReplicaIds = 5;
  map<string, PbStorageInfo> committedPrimaryStorageInfos = 6;
  map<string, PbStorageInfo> committedReplicaStorageInfos = 7;
  map<string, bytes> mapIdBitmap = 10;
  int64 totalWritten = 8;
  int32 fileCount = 9;
}

message PbDestroyWorkerSlots {
  string shuffleKey = 1;
  repeated string primaryLocations = 2;
  repeated string replicaLocation = 3;
  bool mockFailure = 4;
}

message PbDestroyWorkerSlotsResponse {
  int32 status = 1;
  repeated string failedPrimaries = 2;
  repeated string failedReplicas = 3;
}

message PbCheckForWorkerTimeout {
}

message PbRemoveWorkersUnavailableInfo {
  repeated PbWorkerInfo workerInfo = 1;
  string requestId = 2;
}

message PbWorkerExclude {
  repeated PbWorkerInfo workersToAdd = 1;
  repeated PbWorkerInfo workersToRemove = 2;
  string requestId = 3;
}

message PbWorkerExcludeResponse {
  bool success = 1;
}

message PbWorkerLost {
  string host = 1;
  int32 rpcPort = 2;
  int32 pushPort = 3;
  int32 fetchPort = 4;
  int32 replicatePort = 5;
  string requestId = 6;
}

message PbWorkerLostResponse {
  bool success = 1;
}

message PbStageEnd {
  int32 shuffleId = 1;
}

message PbStageEndResponse {
  int32 status = 1;
}

message PbSortedShuffleFileSet {
  repeated string files = 1;
}

message PbStoreVersion {
  int32 major = 1;
  int32 minor = 2;
}

message PbFileInfo {
  string filePath = 1;
  repeated int64 chunkOffsets = 2;
  PbUserIdentifier userIdentifier = 3;
  int32 partitionType = 4;
  int32 bufferSize = 5;
  int32 numSubpartitions = 6;
  int64 bytesFlushed = 7;
  bool partitionSplitEnabled = 8;
}

message PbFileInfoMap {
  map<string, PbFileInfo> values = 1;
}

message PbUserIdentifier {
  string tenantId = 1;
  string name = 2;
}

message PbResourceConsumption {
  int64 diskBytesWritten = 1;
  int64 diskFileCount = 2;
  int64 hdfsBytesWritten = 3;
  int64 hdfsFileCount = 4;
}

message PbAppDiskUsage {
  string appId = 1;
  int64 estimatedUsage = 2;
}

message PbAppDiskUsageSnapshot {
  int32 topItemCount = 1;
  repeated PbAppDiskUsage topNItems = 2;
  int64 startSnapShotTime = 3;
  int64 endSnapshotTime = 4;
}

message PbSnapshotMetaInfo {
  int64 estimatedPartitionSize = 1;
  repeated string registeredShuffle = 2;
  repeated string hostnameSet = 3;
  repeated PbWorkerInfo excludedWorkers = 4;
  repeated PbWorkerInfo workerLostEvents = 5;
  map<string, int64> appHeartbeatTime = 6;
  repeated PbWorkerInfo workers = 7;
  int64 partitionTotalWritten = 8;
  int64 partitionTotalFileCount = 9;
  repeated PbAppDiskUsageSnapshot appDiskUsageMetricSnapshots = 10;
  PbAppDiskUsageSnapshot currentAppDiskUsageMetricsSnapshot = 11;
  map<string, int64> lostWorkers = 12;
  repeated PbWorkerInfo shutdownWorkers = 13;
  repeated PbWorkerInfo manuallyExcludedWorkers = 14;
}

message PbOpenStream {
  string shuffleKey = 1;
  string fileName = 2;
  int32 startIndex = 3;
  int32 endIndex = 4;
  int32 initialCredit = 5;
  bool readLocalShuffle = 6;
}

message PbStreamHandler {
  int64 streamId = 1;
  int32 numChunks = 2;
  repeated int64 chunkOffsets = 3;
  string fullPath = 4;
}

message PbPushDataHandShake {
  PbPartitionLocation.Mode mode = 1;
  string shuffleKey = 2;
  string partitionUniqueId = 3;
  int32 attemptId = 4;
  int32 numPartitions = 5;
  int32 bufferSize = 6;
}

message PbRegionStart {
  PbPartitionLocation.Mode mode = 1;
  string shuffleKey = 2;
  string partitionUniqueId = 3;
  int32 attemptId = 4;
  int32 currentRegionIndex = 5;
  bool isBroadcast = 6;
}

message PbRegionFinish {
  PbPartitionLocation.Mode mode = 1;
  string shuffleKey = 2;
  string partitionUniqueId = 3;
  int32 attemptId = 4;
}

message PbBacklogAnnouncement {
  int64 streamId = 1;
  int32 backlog = 2;
}

message PbBufferStreamEnd {
  StreamType streamType = 1;
  int64 streamId = 2;
}

message PbReadAddCredit {
  int64 streamId = 1;
  int32 credit = 2;
}

message PbStreamChunkSlice {
  int64 streamId = 1;
  int32 chunkIndex = 2;
  int32 offset = 3;
  int32 len = 4;
}

message PbChunkFetchRequest {
  PbStreamChunkSlice streamChunkSlice = 1;
}

message PbTransportableError {
  int64 streamId = 1;
  string message = 2;
}

enum PbAuthType {
  CLIENT_AUTH = 0;
  CONNECTION_AUTH = 1;
}

message PbSaslMechanism {
  string mechanism = 1;
  repeated PbAuthType authTypes = 2;
}

message PbSaslRequest {
  string method = 1;
  PbAuthType authType = 2;
  bytes payload = 3;
}
